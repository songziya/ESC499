//Domain file
domain Navigation_Nonlinear {
	
	requirements {
		concurrent,			 // action is split in two directions(x,y)
		//constrained-state,   // states are contrained by the boundaries
		continuous, 	     // continuous state
		cpf-deterministic,   // transition function is deterministic
		reward-deterministic // reward function is also deterministic
	};
	
	type {
		pos: object;
	};
		
	pvariable {
		// State boundary constant
		s_u_bound:{non-fluent, real, default = 10.0};
		s_l_bound:{non-fluent, real, default = 0.0};
		// Wall
		wall_center(pos):{non-fluent, real, default = 5.0};
		//wall_u_bound(pos):{non-fluent, real, default = 6.0};
		//wall_l_bound(pos):{non-fluent, real, default = 4.0};
		// Action boundary constant
		a_u_bound:{non-fluent, real, default = 1.0};
		a_l_bound:{non-fluent, real, default = -1.0};
		// Goal state
		goal_state(pos):{non-fluent, real, default = 8.0};
		// State variable
		state(pos):{state-fluent, real, default = 0.0};
		// Action variable
		act(pos):{action-fluent, real,default = 0.0};
		
	};
	
	cdfs {
		
		state'(?i) = state(?i)+act(?i);
		
	};
	//Calculate Manhattan distance, sqrt(x^2) = abs(x) 
	reward = - sum_{?i:pos}[sqrt[pow[goal_state(?i) - state(?i),2]]; 
	
	state-action-constraints {
		// action constraints
		forall_{?i:pos}[act(?i) <= a_u_bound];
		forall_{?i:pos}[act(?i) >= a_l_bound];
		
		// state constraints
		forall_{?i:pos}[state(?i) <= s_u_bound];
		forall_{?i:pos}[state(?i) >= s_l_bound];
		// wall state contraints ***Not sure if the implementation below will work***
		~(forall_{?i:pos}[state(?i)>wall_l_bound(?i)] ^ forall_{?i:pos}[state(?i)<wall_u_bound(?i)])
	};
}

// Non-fluents file
non-fluents nf_Navigation_Nonlinear {
	domain = Navigation_Nonlinear;
	objects {
		pos:{x, y};
	};
	non-fluents {
		goal_state(x) = 8.0;
		goal_state(y) = 8.0;
		wall_center(x) = 5.0;
		wall_center(y) = 5.0;
		wall_l_bound(x) = 4.0;
		wall_l_bound(y) = 4.0;
		wall_u_bound(x) = 6.0;
		wall_u_bound(y) = 6.0;
		
	};
}

// Instance file
instance nav_nl_inst {
	domain = Navigation_Nonlinear;
	non-fluents = nf_Navigation_Nonlinear;
	init-state {
		state(x) = 0.5;
		state(y) = 0.5;
	};
	max-nondef-actions = 2; // actions in x and y
	horizon = 40;
	discount = 1.0;
}
